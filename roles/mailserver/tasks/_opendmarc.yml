---
- name: Opendmarc - install system packages
  apt:
    name: "{{ mailserver_opendmarc_packages }}"

- name: Enable service
  systemd:
    name: opendmarc
    state: started
    enabled: yes

- name: Adjust opendmarc config
  lineinfile:
    path: /etc/opendmarc.conf
    regexp: >-
      {{ item.config_key }} .*
    line: >-
      {{ item.config_key }} {{ item.config_value }}
  loop:
    - config_key: "AuthservID"
      config_value: "OpenDMARC"

    - config_key: "IgnoreAuthenticatedClients"
      config_value: "true"

    - config_key: "RejectFailures"
      config_value: "true"

    - config_key: "RequiredHeaders"
      config_value: "true"

    - config_key: "SPFSelfValidate"
      config_value: "true"
  notify: Restart opendmarc service
    
- name: "Create DNS record"
  nsupdate:
    server: "127.0.0.1"
    zone: "{{ item }}"
    record: "_dmarc"
    type: TXT
    value: "v=DMARC1;p=reject;pct=20;rua=mailto:hostmaster@{{ item }};ruf=mailto:hostmaster@{{ item }};rf=afrf;aspf=r;adkim=r"
    state: present
  loop: "{{ opendmarc_keys }}"
  register: _dmarc_record_creation
  when:
    - render_opendmarc_record is not defined or not render_opendmarc_record

- name: Render opendmarc record formatted for mailserver role integration
  debug:
    msg: |-
      {% for key in opendmarc_keys %}
      # insert in zone {{ key }}
      - name: "_dmarc"
        text: "v=DMARC1;p=reject;pct=20;rua=mailto:hostmaster@{{ key }};ruf=mailto:hostmaster@{{ key }};rf=afrf;aspf=r;adkim=r"
      {% endfor %}
  when:
    - render_opendmarc_record is defined
    - render_opendmarc_record | bool

- name: Sync dynamic record with zone file
  shell: >-
    rndc sync -clean {{ item }}
  loop: "{{ opendmarc_keys }}"
  when: _dmarc_record_creation is changed

- meta: flush_handlers
