---
# defaults file for peertube
app_domain:
webserver_https: True
webserver_port: 443

accounts:
  twitter: "@twitteraccount"
  adminmail: "admin@example.com"

peer_version: 
#v1.0.0-beta.9
#v1.0.0-beta.10
#v1.0.0-beta.11
#v1.0.0-beta.12
#v1.0.0-beta.13
peer_version_url: https://api.github.com/repos/chocobozzz/peertube/releases/latest
peer_version_dest: /tmp
peer_src_url: "https://github.com/Chocobozzz/PeerTube/releases/download/{{ peer_version }}/peertube-{{ peer_version }}.zip"

app_user: peertube
app_user_password: "{{lookup('password', 'zz.%s.credentials.txt chars=ascii_letters,digits' % '{{ app_user }}' )}}"
app_user_home: /var/www/peertube
app_user_shell: /bin/bash

config:
  smtp:
    comment: |
      port 465  If you use StartTLS 587
      tls true  If you use StartTLS false
      ca_file null  Used for self signed certificates
    hostname: null
    port: 465 # If you use StartTLS: 587
    username: null
    password: null
    tls: true # If you use StartTLS: false
    disable_starttls: false
    ca_file: null # Used for self signed certificates
    from_address: 'admin@example.com'
  log:
    level: 'info' 
    comment: debug/info/warning/error
  search:
    comment: |
      Add ability to search remote videos/actors by URI,
      that may not be federated with your instance
    remote_uri: 
      users: true
      anonymous: false
  trending:
    videos:
      comment: Compute trending videos for the last x days
      interval_days: 7 


config_start:

  signup:
    enabled: false
    requires_email_verification: false
    limit: 10 
    comment: |
      When the limit is reached, registrations are disabled.
      -1 == unlimited
    filters:
      cidr: 
        comment: |
          You can specify CIDR ranges to whitelist 
          (empty = no filtering) or blacklist
        whitelist: []
        blacklist: []
  
  user:
    comment: |
      Default value of maximum video BYTES the user can upload
      (does not take into account transcoded files).
      -1 == unlimited
    video_quota: -1
    video_quota_daily: -1
  
  import:
    comment: |
      Add ability for your users to import 
      remote videos (from YouTube, torrent...)
    videos:
      http: 
        comment: |
          Classic HTTP or all sites supported by youtube-dl 
          https://rg3.github.io/youtube-dl/supportedsites.html
        enabled: true
      torrent: 
        comment: |
          Magnet URI or torrent file 
          (use classic TCP/UDP/WebSeed to download the file)
        enabled: true

  instance:
    name: 'PeerTube'
    short_description: 'PeerTube, a federated (ActivityPub) video streaming platform using P2P (BitTorrent) directly in the web browser with WebTorrent and Angular.'
    description: ' # Support markdown'
    terms: ' # Support markdown'
    default_client_route: '/videos/trending'
    comment: |
      By default, "do_not_list" or "blur" or "display" NSFW videos
      Could be overridden per user with a setting
    default_nsfw_policy: 'do_not_list'
    securitytxt: |
      "# If you would like to report a security issue\n# you may report it to:\nContact: https://github.com/Chocobozzz/PeerTube/blob/develop/SECURITY.md\nContact: mailto:{{ accounts.adminmail }}"
    customizations:
      comment: |
        javascript - Directly your JavaScript code (without <script> tags).  Will be eval at runtime
        css -  Directly your CSS code (without <style> tags). Will be injected at runtime
      javascript: '' 
      css: '' 
    robots: |
      User-agent: *
      Disallow: ''
    robots_comment: |
      Robot.txt rules. 
      To disallow robots to crawl your instance 
      and disallow indexation of your site, 
      add '/' to Disallow:
  
config_default:

  listen:
    hostname: 'localhost'
    port: 9000

  webserver:
    comment: Correspond to your reverse proxy "listen" configuration
    https: "{{ webserver_https }}"
    port: "{{ webserver_port }}"
    hostname: "{{ app_domain }}"
  
  trust_proxy:
    - 'loopback'
  trust_proxy_comment: |
      Proxies to trust to get real client IP
      If you run PeerTube just behind a local proxy (nginx), keep 'loopback'
      If you run PeerTube behind a remote proxy, add the proxy IP address (or subnet)
  
  database:
    comment: Your database name will be "peertube"+database.suffix
    hostname: 'localhost'
    port: 5432
    suffix: '{{ app_pg_db_suffix }}'
    username: '{{ app_pg_user }}'
    password: '{{ app_pg_user_password }}'
    pool:
      max: 5
  
  redis:
    comment: Redis server for short time storage
    hostname: 'localhost'
    port: 6379
    auth: null
    db: 0
  
  storage:
    comment: From the project root directory
    avatars: '{{ directory_storage }}/avatars/'
    videos: '{{ directory_storage }}/videos/'
    logs: '{{ directory_storage }}/logs/'
    previews: '{{ directory_storage }}/previews/'
    thumbnails: '{{ directory_storage }}/thumbnails/'
    torrents: '{{ directory_storage }}/torrents/'
    cache: '{{ directory_storage }}/cache/'
    captions: '{{ directory_storage }}/captions/'
  
config_dynamic:

  admin:
    email: '{{ accounts.adminmail }}'
  
  services:
    comment: Cards configuration to format video in Twitter
    twitter:
      username: '{{ accounts.twitter }}'
      comment: |
        Indicates the Twitter account for the website or platform on which the content was published
        If true, a video player will be embedded in the Twitter feed on PeerTube video share
        If false, we use an image link card that will redirect on your PeerTube instance
        Test on https://cards-dev.twitter.com/validator to see if you are whitelisted
        
      whitelisted: false

  cache:
    comment: |
      previews - Max number of previews you want to cache
      captions - Max number of video captions/subtitles you want to cache
    previews:
      size: 100
    captions:
      size: 500 
  
  transcoding:
    comment: |
      If enabled, the video will be transcoded to mp4 (x264) with "faststart" flag
      In addition, if some resolutions are enabled the mp4 video file will be transcoded to these new resolutions.
      Please, do not disable transcoding since many uploaded videos will not work
    enabled: true
    threads: 1
    resolutions: 
      comment: Only created if the original video has a higher resolution, uses more storage!
      240p: false
      360p: false
      480p: false
      720p: false
      1080p: false
  

dirs:
  - name: config
    path: "{{ app_user_home }}/config"
  - name: versions
    path: "{{ app_user_home }}/versions/peertube-{{ peer_version }}"
  - name: storage
    path: "{{ app_user_home }}/storage"
  - name: backup
    path: "{{ app_user_home }}/backup"
latest:
  - name: latest
    path: "{{ app_user_home }}/peertube-latest"

special_directories:
  - config
  - storage
  - versions
  - backup
    
directory_version: "{{ app_user_home }}/versions/peertube-{{ peer_version }}"
directory_latest: "{{ app_user_home }}/peertube-latest"
directory_config: "{{ app_user_home }}/config"
directory_storage: "{{ app_user_home }}/storage"

yarn_options: "--production --pure-lockfile"

config_default_src: "{{ directory_latest }}/config/default.yaml"
config_dest: "{{ directory_config }}/production.yaml"

nginx_config_dest: "/etc/nginx/sites-available/peertube"
nginx_config_dest_enable: "/etc/nginx/sites-enabled/peertube"

peertube_service_src: "{{ directory_latest }}/support/systemd/peertube.service"
peertube_service_name: "peertube"

app_pg_db_prefix: peertube
app_pg_db_suffix: _prod
app_pg_db: "{{ app_pg_db_prefix }}{{ app_pg_db_suffix }}"
app_pg_user: peertube
app_pg_user_password: "{{ lookup('password', '~/%s.credentials.txt chars=ascii_letters,digits' % 'pgsql_user' )}}"
app_pg_ext: 
  - pg_trgm
  - unaccent

yarn_gpg_url: "https://dl.yarnpkg.com/debian/pubkey.gpg"
yarn_repo_line: "deb https://dl.yarnpkg.com/debian/ stable main" 
yarn_repo_file: "/etc/apt/sources.list.d/yarn.list"


nodejs_url: https://deb.nodesource.com/setup_8.x 
nodejs_url_dest: /tmp

basic_packages:
  - curl
  - sudo
  - unzip
  - vim
  - htop
remaining_packages:
  - nginx
  - ffmpeg
  - postgresql
  - postgresql-contrib
  - openssl
  - g++
  - make
  - redis-server
  - git
  - jq
  - python-psycopg2
  - python-pexpect
